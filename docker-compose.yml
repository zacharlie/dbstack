version: '3.9'

x-logging:
  &dbstack-logging
  driver: json-file
  options:
    max-size: 200m
    max-file: '10'

volumes:
  log-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/data/volumes/log-data'
  postgis-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/data/volumes/postgis-data'
  db-backup:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/data/volumes/db-backup'
  pg-admin-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/data/volumes/pg-admin-data'
  grafana-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/data/volumes/grafana-data'
  uptime-kuma-data:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '${PWD}/data/volumes/uptime-kuma-data'

services:
  loki:
    image: grafana/loki
    command: -config.file=/etc/loki/local-config.yaml
    expose:
      - 3100
    volumes:
      - log-data:/var/log
      - ${PWD}/config/loki/loki-local-config.yaml:/etc/loki/local-config.yaml
      - ${PWD}/config/loki/rules:/loki/rules
    logging: *dbstack-logging

  db:
    image: kartoza/postgis:${POSTGRES_MAJOR_VERSION}-${POSTGIS_MAJOR_VERSION}.${POSTGIS_MINOR_RELEASE}
    # container_name: master-database
    volumes:
      - postgis-data:/var/lib/postgresql
      - db-backup:/backups
      - ${PWD}/config/sql/database_setup.sh:/docker-entrypoint-initdb.d/database_setup.sh:ro
      - ${PWD}/config/db/extra.conf:/settings/extra.conf
      - ${PWD}/config/sql:/sql:ro
      - ${PWD}/logs/pg_log:/var/lib/postgresql/data/pg_log
      - ${PWD}/data:/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - ALLOW_IP_RANGE=${ALLOW_IP_RANGE}
      - POSTGRES_MULTIPLE_EXTENSIONS=${POSTGRES_MULTIPLE_EXTENSIONS}
      - FORCE_SSL=${FORCE_SSL}
    logging: *dbstack-logging
    expose:
      - 5432/tcp
    ports:
      - ${POSTGRES_PORT}:5432
    healthcheck:
      test: "exit 0"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db-backup:
    image: kartoza/pg-backup:${POSTGRES_MAJOR_VERSION}.0
    hostname: pg-backups
    volumes:
      - db-backup:/backups
    environment:
      - DUMPPREFIX=PG_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=5432
    logging: *dbstack-logging
    depends_on:
      - db

  pgadmin:
    image: dpage/pgadmin4
    volumes:
      - pg-admin-data:/var/lib/pgadmin
      - ${PWD}/config/db/pgadmin_servers.json:/pgadmin4/servers.json
      - ${PWD}/config/db/pgpassfile:/config/pg
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_USER}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASS}
      - PGADMIN_LISTEN_PORT=80
      - PGADMIN_SERVER_JSON_FILE=/pgadmin4/servers.json
      # disable password resets
      - PGADMIN_DISABLE_POSTFIX=TRUE
    logging: *dbstack-logging
    expose:
      - 80
    healthcheck:
      test: "exit 0"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - db

  postgrest:
    image: postgrest/postgrest
    environment:
      - PGRST_DB_URI=postgres://${PGRST_DB_USER}:${PGRST_DB_PASS}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=${SSL_MODE}
      # Can be comma separated and https://postgrest.org/en/v8.0/api.html#multiple-schemas
      - PGRST_DB_SCHEMAS=${PGRST_DB_SCHEMAS}
      - PGRST_DB_ANON_ROLE=${PGRST_DB_USER}
      - PGRST_OPENAPI_SERVER_PROXY_URI=${SERVER_URL}/rest
      - PGRST_SERVER_PORT=${PGRST_SERVER_PORT}
      # Number should be less than PostgreSQL max_connections
      - PGRST_DB_POOL=50
      - PGRST_DB_POOL_TIMEOUT=120
      - PGRST_DB_MAX_ROWS=${PGRST_DB_MAX_ROWS}
      # Values can be "crit","error","warn","info"
      - PGRST_LOG_LEVEL=error
    logging: *dbstack-logging
    expose:
      - ${PGRST_SERVER_PORT}
    depends_on:
      - db

  postgraphile:
    image: graphile/postgraphile
    command:
      [
        "--connection",
        "postgres://${PGRST_DB_USER}:${PGRST_DB_PASS}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=no-verify",
        "--owner-connection",
        "postgres://${POSTGRES_USER}:${POSTGRES_PASS}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=no-verify",
        "--schema",
        "${PGRST_DB_SCHEMAS}",
        "--default-role",
        "${PGRST_DB_USER}",
        "--retry-on-init-fail",
        "--cors",
        "--watch"
      ]
    logging: *dbstack-logging
    expose:
      - 5000
    depends_on:
      - db

  swagger:
    image: swaggerapi/swagger-ui
    environment:
      - API_URL=${SERVER_URL}/rest/
      - BASE_URL=/api
    logging: *dbstack-logging
    expose:
      - 8080
    depends_on:
      - db
      - postgrest

  web:
    image: pramsey/pg_featureserv
    command: --config /etc/pg_featureserv.toml
    volumes:
      - ${PWD}/config/apis/pg_featureserv.toml:/etc/pg_featureserv.toml
    environment:
      - DATABASE_URL=postgresql://${PGRST_DB_USER}:${PGRST_DB_PASS}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=${SSL_MODE}
    logging: *dbstack-logging
    expose:
      - 9000
    restart: unless-stopped
    depends_on:
      - db

  tiles:
    image: pramsey/pg_tileserv
    command: --config /etc/pg_tileserv.toml
    volumes:
      - ${PWD}/config/apis/pg_tileserv.toml:/etc/pg_tileserv.toml
    environment:
      - DATABASE_URL=postgresql://${PGRST_DB_USER}:${PGRST_DB_PASS}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=${SSL_MODE}
    logging: *dbstack-logging
    expose:
      - 7800
    restart: unless-stopped
    depends_on:
      - db

  grafana:
    image: grafana/grafana-oss
    environment:
      # https://grafana.com/docs/grafana/latest/administration/configure-docker/
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASS}
      - POSTGRES_USER=${POSTGRES_USER} # used in provisioning files
      - POSTGRES_PASS=${POSTGRES_PASS}
      - SERVER_URL=${SERVER_URL} # used in config for proxy
    volumes:
      - grafana-data:/var/lib/grafana
      - ${PWD}/config/grafana/:/etc/grafana/
    logging: *dbstack-logging
    expose:
      - 3000

  promtail:
    image: grafana/promtail
    command: -config.file=/etc/promtail/promtail-config.yaml
    volumes:
      - log-data:/var/log
      - ${PWD}/config/prom/promtail-docker-config.yaml:/etc/promtail/promtail-config.yaml
    logging: *dbstack-logging
    expose:
      - 9080

  prometheus:
    image: prom/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      #  still seems to redirect graph to root
      # https://github.com/prometheus/prometheus/issues/1583
      # - --web.external-url=${SERVER_URL}/prometheus/
      - --web.route-prefix=/prometheus/
    volumes:
      - ${PWD}/config/prom/prometheus.yml:/etc/prometheus/prometheus.yml
    logging: *dbstack-logging
    expose:
      - 9090

  filebrowser:
    image: filebrowser/filebrowser
    volumes:
      - ${PWD}/config/filebrowser/filebrowser.json:/.filebrowser.json
      - ${PWD}/config/filebrowser/:/config
      # filebrowser user will need permissions on specific folders
      # - ${PWD}/config:/files/config
      - ${PWD}/data:/files/data
      - ${PWD}/secrets:/files/secrets
      - db-backup:/files/backup
    user: ${CURRENT_UID}
    logging: *dbstack-logging
    expose:
      - 80

  watchdog:
    image: zacharlie/dbstack-watchdog
    build:
      args:
        TARGET: "/data/vector"
      context: .
      dockerfile: watchdog-dockerfile
    environment:
      - STARTUP_DELAY=5
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - SCHEMAS=${PGRST_DB_SCHEMAS}
    volumes:
      - "${PWD}/data/vector:/data/vector"
    depends_on:
      - db

  monitor:
    # image: louislam/uptime-kuma
    image: zacharlie/dbstack-monitor
    build:
      context: .
      dockerfile: uptime-kuma-dockerfile
    volumes:
      - ${PWD}/config/kuma:/app/data
    environment:
      - BASE_PATH=/uptime/
      - UPTIME_KUMA_BASE_PATH=/uptime/
    logging: *dbstack-logging
    expose:
      - 3001

  advisor:
    image: gcr.io/cadvisor/cadvisor
    expose:
      - 8080
    command:
      - '-url_base_prefix=/advisor'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

  nginx:
    image: nginx
    volumes:
      - ${PWD}/config/nginx/sites-enabled:/etc/nginx/conf.d:ro
      - ${PWD}/config/nginx/webusers:/etc/nginx/.htpasswd:ro
      - ${PWD}/config/ssl/:/etc/nginx/ssl/
      - ${PWD}/config/www/:/usr/share/nginx/html/www/
      - ${PWD}/docs:/usr/share/nginx/html/www/docs/
    logging: *dbstack-logging
    restart: always
    ports:
      - 80:80
      - 443:443
