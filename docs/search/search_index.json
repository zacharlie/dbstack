{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"architecture/design/","text":"DBStack Architecture \u00b6 The Spatial DBStack is a simple docker compose based stack for providing a set of preconfigured services specifically designed for accessing a spatial database. This includes a database, management interface, monitoring tools, and publishing tools such as APIs and spatial vector data services. It isn't a fullstack GIS platform. It just provides a reasonable level of features for building GIS applications or publishing spatial data effectively.","title":"Design"},{"location":"architecture/design/#dbstack-architecture","text":"The Spatial DBStack is a simple docker compose based stack for providing a set of preconfigured services specifically designed for accessing a spatial database. This includes a database, management interface, monitoring tools, and publishing tools such as APIs and spatial vector data services. It isn't a fullstack GIS platform. It just provides a reasonable level of features for building GIS applications or publishing spatial data effectively.","title":"DBStack Architecture"},{"location":"faq/faq/","text":"FAQ \u00b6 Frequently Asked Questions My browser says it's unsafe \u00b6 By default, we're using self signed ssl certificates. This means that the browser will not trust the certificate, although it is secure. Supplying valid SSL certificates from a registrar, ISP, or service such as letsencrypt or zerossl will remove such errors. Pages aren't loading \u00b6 Check for a log in alert box provided by your browser. Most of the services (except the landing) require http basic auth provided by the nginx proxy to secure services and prevent data leaks. If it's not an auth issue, check that the landing page is available and nginx is running. I only log into one page \u00b6 The basic http auth will be cached as a browser cookie so you only have to authenticate once per session for all the services. How do I reset the stack \u00b6 As a set of docker-compose services, shutting down the stack can be done with docker-compose down from the commandline as long as it's done from the project root directory. Using docker-compose down -v will remove all the named volumes which are storing state (like the data present in the database etc). You can also use docker-compose <command> <service id> where commands include operations like start, stop, restart, and rm to remove. The service id can be inferred from the docker compose file or docker tools. The monitoring tool isn't working \u00b6 Make sure you build the appropriate docker image, or fire up the stack with docker-compose up -d --build . This only needs to be done once... successive running of the stack can be done with docker-compose up -d . How do I add monitoring services \u00b6 The Uptime Kuma service has been preconfigured to serve up the status page by default. If the setup script and example database is used, the status page will be displayed in a user facing manner, by pointing the browser to an address like https://127.0.0.1/uptime/status by default. Administrators can access the service by navigating to https://127.0.0.1/uptime/dashboard and logging in, which will expose the appropriate management commands. I can't access services from another client application \u00b6 You need an SSL exception if using a self-signed certificate (the default behaviour) and some method of supplying basic web auth. Can't I use letsencrypt certificates? \u00b6 Free ssl services like letsencrypt and zerossl require route challenges, and access to ports 80 and 443 (which cannot be shared by other docker containers). Usually, docker-based letsencrypt setups do a bit of jumping through hoops to validate certificates, but the process is challenging to automate in containerised setups. Many implementations expose a separate temporary web server for passing the challenge and hand over after the fact. Often these setups are also challenging to get right for development deployments, which are often not publicly accessible. The SSL certs are intended to be in a volume, so if If you have the ability to do a DNS challenge instead, that is probably easier. Until such time as an effective bolt-on approach can be implemented, self signed certificates are better than no certificates. I can't see my data via the PostgREST API \u00b6 Ensure that the correct permissions are granted to the PostgREST user for your table. If you have a look at the config/sql/general.sql file you will see the SQL code used to grant permissions on all of the available tables in the publish schema. In config/sql/setup.sql you will notice that this is supposed to be granted to all new items for the parent role by default, but for some reason even when they're applied in the database they don't seem to be applied for the API unless explicitly granted to the user. This may be a dbstack bug or a postgrest bug, but it's not clear at this time what the issue is. I can't log into the PGAdmin UI \u00b6 If the browser is prompting for a username and password with an alert box, you need to supply the basic http auth credentials. Access to PGAdmin using the relevant pgadmin credentials will be handled by the PGAdmin landing UI. PGAdmin is locked away behind two layers of auth in this way, which makes it more difficult to interact with when not using a browser, but considering the danger to your database being exposed, it's worth keeping this configuration active. QGIS won't load tile services \u00b6 Check that you aren't requesting the whole dataset. If you have no other data loaded and try load a global vector tile service, the tile server will return an internal server error. This is because if you try load a region like https://host.tld/tiles/publish.ne_10m_admin_0_countries/0/0/0.pbf in the browser you will find that the By contrast, if you try putting https://host.tld/tiles/publish.ne_10m_admin_0_countries/12/31/-29.pbf into your browser, you should download a protobuf file if the tile server is working properly. How do I view QGIS network requests \u00b6 If you are struggling to load your data into QGIS, inspecting network requests is a good way to debug. Open them using the F12 shortcut key, or by navigating to View >> Panels >> Debugging/ Development tools . Press the record button and try load data or pan the map to see what requests QGIS is using to retrieve the data. If any errors occur, QGIS will capture them for you. Tileserv links are broken \u00b6 The pg tileserv templates don't support the baseurl, so links and previews don't work the same way as they work in the pg_featureserv templates. This seems to be an upstream bug which needs fixing. If you click a link and nothing shows up, you'll notice you probably need to manually insert /tiles/_ into the url at the appropriate position. The endpoints should still work in other apps and services though.","title":"FAQ"},{"location":"faq/faq/#faq","text":"Frequently Asked Questions","title":"FAQ"},{"location":"faq/faq/#my-browser-says-its-unsafe","text":"By default, we're using self signed ssl certificates. This means that the browser will not trust the certificate, although it is secure. Supplying valid SSL certificates from a registrar, ISP, or service such as letsencrypt or zerossl will remove such errors.","title":"My browser says it's unsafe"},{"location":"faq/faq/#pages-arent-loading","text":"Check for a log in alert box provided by your browser. Most of the services (except the landing) require http basic auth provided by the nginx proxy to secure services and prevent data leaks. If it's not an auth issue, check that the landing page is available and nginx is running.","title":"Pages aren't loading"},{"location":"faq/faq/#i-only-log-into-one-page","text":"The basic http auth will be cached as a browser cookie so you only have to authenticate once per session for all the services.","title":"I only log into one page"},{"location":"faq/faq/#how-do-i-reset-the-stack","text":"As a set of docker-compose services, shutting down the stack can be done with docker-compose down from the commandline as long as it's done from the project root directory. Using docker-compose down -v will remove all the named volumes which are storing state (like the data present in the database etc). You can also use docker-compose <command> <service id> where commands include operations like start, stop, restart, and rm to remove. The service id can be inferred from the docker compose file or docker tools.","title":"How do I reset the stack"},{"location":"faq/faq/#the-monitoring-tool-isnt-working","text":"Make sure you build the appropriate docker image, or fire up the stack with docker-compose up -d --build . This only needs to be done once... successive running of the stack can be done with docker-compose up -d .","title":"The monitoring tool isn't working"},{"location":"faq/faq/#how-do-i-add-monitoring-services","text":"The Uptime Kuma service has been preconfigured to serve up the status page by default. If the setup script and example database is used, the status page will be displayed in a user facing manner, by pointing the browser to an address like https://127.0.0.1/uptime/status by default. Administrators can access the service by navigating to https://127.0.0.1/uptime/dashboard and logging in, which will expose the appropriate management commands.","title":"How do I add monitoring services"},{"location":"faq/faq/#i-cant-access-services-from-another-client-application","text":"You need an SSL exception if using a self-signed certificate (the default behaviour) and some method of supplying basic web auth.","title":"I can't access services from another client application"},{"location":"faq/faq/#cant-i-use-letsencrypt-certificates","text":"Free ssl services like letsencrypt and zerossl require route challenges, and access to ports 80 and 443 (which cannot be shared by other docker containers). Usually, docker-based letsencrypt setups do a bit of jumping through hoops to validate certificates, but the process is challenging to automate in containerised setups. Many implementations expose a separate temporary web server for passing the challenge and hand over after the fact. Often these setups are also challenging to get right for development deployments, which are often not publicly accessible. The SSL certs are intended to be in a volume, so if If you have the ability to do a DNS challenge instead, that is probably easier. Until such time as an effective bolt-on approach can be implemented, self signed certificates are better than no certificates.","title":"Can't I use letsencrypt certificates?"},{"location":"faq/faq/#i-cant-see-my-data-via-the-postgrest-api","text":"Ensure that the correct permissions are granted to the PostgREST user for your table. If you have a look at the config/sql/general.sql file you will see the SQL code used to grant permissions on all of the available tables in the publish schema. In config/sql/setup.sql you will notice that this is supposed to be granted to all new items for the parent role by default, but for some reason even when they're applied in the database they don't seem to be applied for the API unless explicitly granted to the user. This may be a dbstack bug or a postgrest bug, but it's not clear at this time what the issue is.","title":"I can't see my data via the PostgREST API"},{"location":"faq/faq/#i-cant-log-into-the-pgadmin-ui","text":"If the browser is prompting for a username and password with an alert box, you need to supply the basic http auth credentials. Access to PGAdmin using the relevant pgadmin credentials will be handled by the PGAdmin landing UI. PGAdmin is locked away behind two layers of auth in this way, which makes it more difficult to interact with when not using a browser, but considering the danger to your database being exposed, it's worth keeping this configuration active.","title":"I can't log into the PGAdmin UI"},{"location":"faq/faq/#qgis-wont-load-tile-services","text":"Check that you aren't requesting the whole dataset. If you have no other data loaded and try load a global vector tile service, the tile server will return an internal server error. This is because if you try load a region like https://host.tld/tiles/publish.ne_10m_admin_0_countries/0/0/0.pbf in the browser you will find that the By contrast, if you try putting https://host.tld/tiles/publish.ne_10m_admin_0_countries/12/31/-29.pbf into your browser, you should download a protobuf file if the tile server is working properly.","title":"QGIS won't load tile services"},{"location":"faq/faq/#how-do-i-view-qgis-network-requests","text":"If you are struggling to load your data into QGIS, inspecting network requests is a good way to debug. Open them using the F12 shortcut key, or by navigating to View >> Panels >> Debugging/ Development tools . Press the record button and try load data or pan the map to see what requests QGIS is using to retrieve the data. If any errors occur, QGIS will capture them for you.","title":"How do I view QGIS network requests"},{"location":"faq/faq/#tileserv-links-are-broken","text":"The pg tileserv templates don't support the baseurl, so links and previews don't work the same way as they work in the pg_featureserv templates. This seems to be an upstream bug which needs fixing. If you click a link and nothing shows up, you'll notice you probably need to manually insert /tiles/_ into the url at the appropriate position. The endpoints should still work in other apps and services though.","title":"Tileserv links are broken"},{"location":"library/grafana/","text":"add queries for grafana, loki, prometheus et al","title":"Grafana Queries"},{"location":"library/snippets/","text":"","title":"Snippets"},{"location":"start/deployment/","text":"Quickstart Deployment \u00b6 The dbstack is a simple docker-compose project. Clone the repository: git clone https://github.com/zacharlie/spatial-dbstack.git Make setup scripts executable cd spatial-dbstack && chmod +x ./setup.sh && chmod +x ./provision.sh (Optional/ Not for dev env) install required software and provision server ./provision.sh Run the setup (configure .env and set information such as passwords, domain etc) ./setup.sh Note that running setup.sh will overwrite existing config. Use with caution. Launch the stack docker-compose up -d Uptime kuma isn't working correctly, so docker-compose up -d --build would be required, but it needs to be fixed first.","title":"Deployment"},{"location":"start/deployment/#quickstart-deployment","text":"The dbstack is a simple docker-compose project. Clone the repository: git clone https://github.com/zacharlie/spatial-dbstack.git Make setup scripts executable cd spatial-dbstack && chmod +x ./setup.sh && chmod +x ./provision.sh (Optional/ Not for dev env) install required software and provision server ./provision.sh Run the setup (configure .env and set information such as passwords, domain etc) ./setup.sh Note that running setup.sh will overwrite existing config. Use with caution. Launch the stack docker-compose up -d Uptime kuma isn't working correctly, so docker-compose up -d --build would be required, but it needs to be fixed first.","title":"Quickstart Deployment"},{"location":"start/service-information/","text":"Service Information \u00b6 The spatial dbstack includes the following components: nginx (proxy for all services, and enforces http basic auth by default) PostGIS (including pgrouting and other extensions) PostgREST (with swagger ui, exposes everything in the publish schema) PGAdmin (easy access to db via web UI without exposing the db port publicly) Uptime Kuma (personal uptime robot) pg_featureserv (OGC features/ WFS3 API for everything in the publish schema) pg_tileeserv (Vector tiles for everything in the publish schema) Grafana (with prometheus and loki) Filebrowser (for file uploads and management) Example endpoints \u00b6 Some examples of how to use geodata services via endpoints: Query the rest API: https://127.0.0.1/rest/ne_10m_admin_0_countries?id=lt.10 Feature Service GetCapabilities: https://127.0.0.1/web/?SERVICE=WFS&REQUEST=GetCapabilities&ACCEPTVERSIONS=2.0.0,1.1.0,1.0.0 Retrieve vector tiles: https://127.0.0.1/tiles/publish.ne_10m_admin_0_countries/{z}/{x}/{y}.pbf Service Details \u00b6 Usage and configuration details for dbstack services. Nginx \u00b6 Nginx acts as a proxy gateway for all services, and enforces http basic auth by default. It includes basic web capabilities and some default template pages are provided out of the box, including a service landing page and example leaflet maps with vector tile support. PostGIS \u00b6 Docker-PostGIS image from Kartoza, includes pgrouting and other extensions for performing GIS analysis directly in PostgreSQL. A tower of hanoi backup image has been implemented to run alongside. In the future this should integrate with the file browser much better. PostgREST \u00b6 Automatically generate an OpenAPI compliant service from PostgreSQL. Using the default setup provided by the dbstack, it exposes everything in the publish schema. Simply adding data to the publish schema should expose it via the API. Swagger UI \u00b6 UI for browsing OpenAPI compliant service endpoints. By default it points to the postgrest endpoint to provide a self-documenting API service. PGAdmin \u00b6 User Interface for PostgreSQL. Can be used to point to and manage any databases accessible to the host, and provides preconfigured access to the stack database by default. This provides a convenient interface for database management, which is especially useful in instances where the database is not exposed on another port, such as an intermediary database system which consumes, analysis, and publishes data without a need for continued direct access by end users. Note that exposing PGAdmin is a serious security consideration that carries a substantial amount of risk. Uptime Kuma \u00b6 A simple personal uptime robot for monitoring service health and sending out notices. Requires a custom docker build to add PR#1092 which enables utilisation under a subpath (as configured in this stack). Defaults to loading the user-friendly status page at https://127.0.0.1/uptime/status and requires manual navigation to https://127.0.0.1/uptime/dashboard to access login and administrative features. pg_featureserv \u00b6 An OGC features/ WFS3 API for PostGIS. Using the default setup provided by the dbstack, it exposes everything in the publish schema. Note that the WFS3 API is a geodata API for interacting with features in a GIS or map interface and differs significantly from the API supplied by PostREST. pg_tileeserv \u00b6 A vector tiles service for PostGIS. Using the default setup provided by the dbstack, it exposes everything in the publish schema. Grafana \u00b6 Advanced dashboarding goodies. Note that in order to function effectively behind the reverse proxy, Grafana uses the http auth provided by the nginx proxy, so the Grafana Admin user needs to be included in the web users in order for Grafana to function effectively. Prometheus/ Promtail/ Loki configs and details will be added once upon a time. Filebrowser \u00b6 Filebrowser.org provides a web based interface for managing files and directories, including uploading geodata that can be ingested directly into the database. Docker tries to run and mount everything as root, so have RW access to the entire config directory can cause significant security exposure or introduce a large number of file permissions issues. Use wisely. Note that exposing the filebrowser is a serious security consideration that carries a substantial amount of risk.","title":"Service Information"},{"location":"start/service-information/#service-information","text":"The spatial dbstack includes the following components: nginx (proxy for all services, and enforces http basic auth by default) PostGIS (including pgrouting and other extensions) PostgREST (with swagger ui, exposes everything in the publish schema) PGAdmin (easy access to db via web UI without exposing the db port publicly) Uptime Kuma (personal uptime robot) pg_featureserv (OGC features/ WFS3 API for everything in the publish schema) pg_tileeserv (Vector tiles for everything in the publish schema) Grafana (with prometheus and loki) Filebrowser (for file uploads and management)","title":"Service Information"},{"location":"start/service-information/#example-endpoints","text":"Some examples of how to use geodata services via endpoints: Query the rest API: https://127.0.0.1/rest/ne_10m_admin_0_countries?id=lt.10 Feature Service GetCapabilities: https://127.0.0.1/web/?SERVICE=WFS&REQUEST=GetCapabilities&ACCEPTVERSIONS=2.0.0,1.1.0,1.0.0 Retrieve vector tiles: https://127.0.0.1/tiles/publish.ne_10m_admin_0_countries/{z}/{x}/{y}.pbf","title":"Example endpoints"},{"location":"start/service-information/#service-details","text":"Usage and configuration details for dbstack services.","title":"Service Details"},{"location":"start/service-information/#nginx","text":"Nginx acts as a proxy gateway for all services, and enforces http basic auth by default. It includes basic web capabilities and some default template pages are provided out of the box, including a service landing page and example leaflet maps with vector tile support.","title":"Nginx"},{"location":"start/service-information/#postgis","text":"Docker-PostGIS image from Kartoza, includes pgrouting and other extensions for performing GIS analysis directly in PostgreSQL. A tower of hanoi backup image has been implemented to run alongside. In the future this should integrate with the file browser much better.","title":"PostGIS"},{"location":"start/service-information/#postgrest","text":"Automatically generate an OpenAPI compliant service from PostgreSQL. Using the default setup provided by the dbstack, it exposes everything in the publish schema. Simply adding data to the publish schema should expose it via the API.","title":"PostgREST"},{"location":"start/service-information/#swagger-ui","text":"UI for browsing OpenAPI compliant service endpoints. By default it points to the postgrest endpoint to provide a self-documenting API service.","title":"Swagger UI"},{"location":"start/service-information/#pgadmin","text":"User Interface for PostgreSQL. Can be used to point to and manage any databases accessible to the host, and provides preconfigured access to the stack database by default. This provides a convenient interface for database management, which is especially useful in instances where the database is not exposed on another port, such as an intermediary database system which consumes, analysis, and publishes data without a need for continued direct access by end users. Note that exposing PGAdmin is a serious security consideration that carries a substantial amount of risk.","title":"PGAdmin"},{"location":"start/service-information/#uptime-kuma","text":"A simple personal uptime robot for monitoring service health and sending out notices. Requires a custom docker build to add PR#1092 which enables utilisation under a subpath (as configured in this stack). Defaults to loading the user-friendly status page at https://127.0.0.1/uptime/status and requires manual navigation to https://127.0.0.1/uptime/dashboard to access login and administrative features.","title":"Uptime Kuma"},{"location":"start/service-information/#pg_featureserv","text":"An OGC features/ WFS3 API for PostGIS. Using the default setup provided by the dbstack, it exposes everything in the publish schema. Note that the WFS3 API is a geodata API for interacting with features in a GIS or map interface and differs significantly from the API supplied by PostREST.","title":"pg_featureserv"},{"location":"start/service-information/#pg_tileeserv","text":"A vector tiles service for PostGIS. Using the default setup provided by the dbstack, it exposes everything in the publish schema.","title":"pg_tileeserv"},{"location":"start/service-information/#grafana","text":"Advanced dashboarding goodies. Note that in order to function effectively behind the reverse proxy, Grafana uses the http auth provided by the nginx proxy, so the Grafana Admin user needs to be included in the web users in order for Grafana to function effectively. Prometheus/ Promtail/ Loki configs and details will be added once upon a time.","title":"Grafana"},{"location":"start/service-information/#filebrowser","text":"Filebrowser.org provides a web based interface for managing files and directories, including uploading geodata that can be ingested directly into the database. Docker tries to run and mount everything as root, so have RW access to the entire config directory can cause significant security exposure or introduce a large number of file permissions issues. Use wisely. Note that exposing the filebrowser is a serious security consideration that carries a substantial amount of risk.","title":"Filebrowser"},{"location":"tutorials/qgis/","text":"QGIS Tutorials \u00b6 Connect to Web Feature Service in QGIS Connect to Vector Tile Service in QGIS","title":"QGIS"},{"location":"tutorials/qgis/#qgis-tutorials","text":"Connect to Web Feature Service in QGIS Connect to Vector Tile Service in QGIS","title":"QGIS Tutorials"},{"location":"tutorials/qgis/connect_pgfeat/","text":"Connect to Web Feature Service in QGIS \u00b6 todo","title":"Connect to Web Feature Service in QGIS"},{"location":"tutorials/qgis/connect_pgfeat/#connect-to-web-feature-service-in-qgis","text":"todo","title":"Connect to Web Feature Service in QGIS"},{"location":"tutorials/qgis/connect_pgtiles/","text":"Connect to Vector Tile Service in QGIS \u00b6 todo","title":"Connect to Vector Tile Service in QGIS"},{"location":"tutorials/qgis/connect_pgtiles/#connect-to-vector-tile-service-in-qgis","text":"todo","title":"Connect to Vector Tile Service in QGIS"}]}